             COMMENT   59   "/* function declarations defined by the standard library */"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "open"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    8   "filename"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "flags"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "read"
       OS_OPEN_PAREN    1   "("
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    2   "fd"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    6   "buffer"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
         KW_UNSIGNED    8   "unsigned"
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "count"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "close"
       OS_OPEN_PAREN    1   "("
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    2   "fd"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
            KW_CONST    5   "const"
         WHITE_SPACE    1   " "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    6   "format"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
         OS_ELLIPSIS    3   "..."
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    6   "malloc"
       OS_OPEN_PAREN    1   "("
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "size"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    7   "realloc"
       OS_OPEN_PAREN    1   "("
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    3   "ptr"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "size"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "free"
       OS_OPEN_PAREN    1   "("
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    3   "ptr"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_EXTERN    6   "extern"
         WHITE_SPACE    1   " "
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "abort"
       OS_OPEN_PAREN    1   "("
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    2   "\n\n"
             COMMENT   23   "/* type declarations */"
         WHITE_SPACE    1   "\n"
             KW_ENUM    4   "enum"
         WHITE_SPACE    1   " "
          IDENTIFIER   10   "TOKEN_KIND"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER   13   "ID_OR_KEYWORD"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER   21   "OPERATOR_OR_SEPARATOR"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER   12   "INT_CONSTANT"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER   13   "CHAR_CONSTANT"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER   14   "STRING_LITERAL"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER   17   "FLOATING_CONSTANT"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER   11   "WHITE_SPACE"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER    7   "COMMENT"
            OS_COMMA    1   ","
         WHITE_SPACE    6   " \n    "
          IDENTIFIER    3   "EOF"
         WHITE_SPACE    2   " \n"
      OS_CLOSE_BRACE    1   "}"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    2   "\n\n"
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    6   " \n    "
             KW_ENUM    4   "enum"
         WHITE_SPACE    1   " "
          IDENTIFIER   10   "TOKEN_KIND"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "kind"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "end"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    2   "\n\n"
             COMMENT   27   "/* function declarations */"
         WHITE_SPACE    1   "\n"
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER   14   "read_text_file"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    8   "filename"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER   17   "token_kind_to_str"
       OS_OPEN_PAREN    1   "("
             KW_ENUM    4   "enum"
         WHITE_SPACE    1   " "
          IDENTIFIER   10   "TOKEN_KIND"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "kind"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
          IDENTIFIER   11   "print_token"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    4   "prog"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    9   "new_token"
       OS_OPEN_PAREN    1   "("
             KW_ENUM    4   "enum"
         WHITE_SPACE    1   " "
          IDENTIFIER   10   "TOKEN_KIND"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "kind"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "end"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    9   "get_token"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "prog"
      OS_OPEN_SQUARE    1   "["
     OS_CLOSE_SQUARE    1   "]"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "error"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    7   "message"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "prog"
      OS_OPEN_SQUARE    1   "["
     OS_CLOSE_SQUARE    1   "]"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "index"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    2   "\n\n"
             COMMENT   28   "/* The \"main\" entry point */"
         WHITE_SPACE    1   "\n"
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "main"
       OS_OPEN_PAREN    1   "("
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "argc"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    4   "argv"
      OS_OPEN_SQUARE    1   "["
     OS_CLOSE_SQUARE    1   "]"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "    \n    "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "cur"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "i"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    4   "prog"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    6   "\n\n    "
               KW_IF    2   "if"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    4   "argc"
         WHITE_SPACE    1   " "
          OS_LESS_EQ    2   "<="
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "1"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    4   "prog"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER   14   "read_text_file"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    8   "\"clex.c\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    1   " "
             KW_ELSE    4   "else"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    4   "prog"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER   14   "read_text_file"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    4   "argv"
      OS_OPEN_SQUARE    1   "["
        CONSTANT_INT    1   "1"
     OS_CLOSE_SQUARE    1   "]"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    3   "cur"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "0"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
            KW_WHILE    5   "while"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
        CONSTANT_INT    1   "1"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "\n        "
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    1   "t"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    9   "get_token"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    4   "prog"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "cur"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER   11   "print_token"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    4   "prog"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
               KW_IF    2   "if"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    4   "kind"
         WHITE_SPACE    1   " "
            OS_EQ_EQ    2   "=="
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "EOF"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE   13   "\n            "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    3   "cur"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    3   "end"
         WHITE_SPACE    1   " "
             OS_PLUS    1   "+"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "1"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    4   "free"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    4   "prog"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    2   "\n\n"
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "error"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    7   "message"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "prog"
      OS_OPEN_SQUARE    1   "["
     OS_CLOSE_SQUARE    1   "]"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "index"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "cur"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "index"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    6   "maxlen"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
        CONSTANT_INT    2   "50"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    6   "\n\n    "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL   13   "\"error: %s\n\""
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    7   "message"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL   22   "\"error begins from:\n\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    6   "\n\n    "
            KW_WHILE    5   "while"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    4   "prog"
      OS_OPEN_SQUARE    1   "["
          IDENTIFIER    3   "cur"
     OS_CLOSE_SQUARE    1   "]"
         WHITE_SPACE    1   " "
           OS_NOT_EQ    2   "!="
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    4   "'\0'"
         WHITE_SPACE    1   " "
          OS_AND_AND    2   "&&"
         WHITE_SPACE    1   " "
          IDENTIFIER    6   "maxlen"
         WHITE_SPACE    1   " "
          OS_GREATER    1   ">"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "0"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    4   "\"%c\""
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "prog"
      OS_OPEN_SQUARE    1   "["
          IDENTIFIER    3   "cur"
     OS_CLOSE_SQUARE    1   "]"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    3   "cur"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "cur"
         WHITE_SPACE    1   " "
             OS_PLUS    1   "+"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "1"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    6   "maxlen"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    6   "maxlen"
         WHITE_SPACE    1   " "
            OS_MINUS    1   "-"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "1"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    4   "\"\n\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    2   "\n\n"
             COMMENT  100   "/* Open \"filename\" and load the content into the memory. The return\n value is the memory address. */"
         WHITE_SPACE    1   "\n"
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER   14   "read_text_file"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    8   "filename"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    2   "fd"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "nread"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    8   "buf_size"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    7   "src_len"
               OS_EQ    1   "="
        CONSTANT_INT    1   "0"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    3   "buf"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    6   "\n\n    "
          IDENTIFIER    2   "fd"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "open"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    8   "filename"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "0"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    8   "buf_size"
               OS_EQ    1   "="
        CONSTANT_INT    4   "4096"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    3   "buf"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    6   "malloc"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    8   "buf_size"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
               KW_DO    2   "do"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "\n        "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "avail"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    8   "buf_size"
         WHITE_SPACE    1   " "
            OS_MINUS    1   "-"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    7   "src_len"
         WHITE_SPACE    1   " "
             OS_PLUS    1   "+"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "1"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
               KW_IF    2   "if"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    5   "avail"
         WHITE_SPACE    1   " "
          OS_LESS_EQ    2   "<="
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "0"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE   13   "\n            "
             COMMENT   26   "/* increase buffer size */"
         WHITE_SPACE   13   "\n            "
          IDENTIFIER    8   "buf_size"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    8   "buf_size"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "2"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
          IDENTIFIER    3   "buf"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    7   "realloc"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    3   "buf"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    8   "buf_size"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
          IDENTIFIER    5   "avail"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    8   "buf_size"
         WHITE_SPACE    1   " "
            OS_MINUS    1   "-"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    7   "src_len"
         WHITE_SPACE    1   " "
             OS_PLUS    1   "+"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "1"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    5   "nread"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "read"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    2   "fd"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "buf"
         WHITE_SPACE    1   " "
             OS_PLUS    1   "+"
         WHITE_SPACE    1   " "
          IDENTIFIER    7   "src_len"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "avail"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    7   "src_len"
         WHITE_SPACE    1   " "
          OS_PLUS_EQ    2   "+="
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "nread"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    1   " "
            KW_WHILE    5   "while"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    5   "nread"
         WHITE_SPACE    1   " "
          OS_GREATER    1   ">"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "0"
         WHITE_SPACE    1   " "
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    3   "buf"
      OS_OPEN_SQUARE    1   "["
          IDENTIFIER    7   "src_len"
     OS_CLOSE_SQUARE    1   "]"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    4   "'\0'"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    5   "close"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    2   "fd"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "buf"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    2   "\n\n"
             COMMENT   56   "/* Return abbreviated string for a kind of the token. */"
         WHITE_SPACE    1   "\n"
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER   17   "token_kind_to_str"
       OS_OPEN_PAREN    1   "("
             KW_ENUM    4   "enum"
         WHITE_SPACE    1   " "
          IDENTIFIER   10   "TOKEN_KIND"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "kind"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
           KW_SWITCH    6   "switch"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    4   "kind"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER   13   "ID_OR_KEYWORD"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    6   "\"IDKW\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER   21   "OPERATOR_OR_SEPARATOR"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    4   "\"OS\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER   12   "INT_CONSTANT"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    4   "\"IC\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER   13   "CHAR_CONSTANT"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    4   "\"CC\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER   14   "STRING_LITERAL"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    4   "\"SL\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER   17   "FLOATING_CONSTANT"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    4   "\"FC\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER   11   "WHITE_SPACE"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    4   "\"WS\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER    7   "COMMENT"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    4   "\"CM\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "EOF"
            OS_COLON    1   ":"
         WHITE_SPACE    1   " "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
      STRING_LITERAL    5   "\"EOF\""
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          KW_DEFAULT    7   "default"
            OS_COLON    1   ":"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL   15   "\"unreachable\n\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    5   "abort"
       OS_OPEN_PAREN    1   "("
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    2   "\n\n"
             COMMENT   22   "/* Print the token. */"
         WHITE_SPACE    1   "\n"
             KW_VOID    4   "void"
         WHITE_SPACE    1   " "
          IDENTIFIER   11   "print_token"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
             OS_MULT    1   "*"
          IDENTIFIER    4   "prog"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "c"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "i"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    6   "\n\n    "
               KW_IF    2   "if"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    4   "kind"
         WHITE_SPACE    1   " "
            OS_EQ_EQ    2   "=="
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "EOF"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    7   "\"%5s\n\""
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER   17   "token_kind_to_str"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    4   "kind"
      OS_CLOSE_PAREN    1   ")"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
           KW_RETURN    6   "return"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    6   "\n\n    "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL   16   "\"%5s %5d     \\"\""
            OS_COMMA    1   ","
         WHITE_SPACE   13   " \n           "
          IDENTIFIER   17   "token_kind_to_str"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    4   "kind"
      OS_CLOSE_PAREN    1   ")"
            OS_COMMA    1   ","
         WHITE_SPACE   13   " \n           "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    3   "end"
         WHITE_SPACE    1   " "
            OS_MINUS    1   "-"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    5   "begin"
         WHITE_SPACE    1   " "
             OS_PLUS    1   "+"
         WHITE_SPACE    1   " "
        CONSTANT_INT    1   "1"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
              KW_FOR    3   "for"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "i"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    5   "begin"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "i"
         WHITE_SPACE    1   " "
          OS_LESS_EQ    2   "<="
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    3   "end"
        OS_SEMICOLON    1   ";"
          IDENTIFIER    1   "i"
        OS_PLUS_PLUS    2   "++"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    9   "\n        "
          IDENTIFIER    1   "c"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "prog"
      OS_OPEN_SQUARE    1   "["
          IDENTIFIER    1   "i"
     OS_CLOSE_SQUARE    1   "]"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
             COMMENT   36   "/* see http://www.asciitable.com/ */"
         WHITE_SPACE    9   "\n        "
               KW_IF    2   "if"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "c"
         WHITE_SPACE    1   " "
       OS_GREATER_EQ    2   ">="
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    3   "' '"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
          OS_AND_AND    2   "&&"
         WHITE_SPACE    1   " "
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "c"
         WHITE_SPACE    1   " "
          OS_LESS_EQ    2   "<="
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    3   "'~'"
      OS_CLOSE_PAREN    1   ")"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE   13   "\n            "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    4   "\"%c\""
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "c"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    9   "\n        "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    1   " "
             KW_ELSE    4   "else"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE   13   "\n            "
           KW_SWITCH    6   "switch"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    1   "c"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE   13   "\n            "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    4   "'\n'"
            OS_COLON    1   ":"
         WHITE_SPACE   17   "\n                "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    5   "\"\\n\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   17   "\n                "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    4   "'\t'"
            OS_COLON    1   ":"
         WHITE_SPACE   17   "\n                "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    5   "\"\\t\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   17   "\n                "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    3   "'\"'"
            OS_COLON    1   ":"
         WHITE_SPACE   17   "\n                "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    6   "\"\\\\"\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   17   "\n                "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    4   "'\\'"
            OS_COLON    1   ":"
         WHITE_SPACE   17   "\n                "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    6   "\"\\\\\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   17   "\n                "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
             KW_CASE    4   "case"
         WHITE_SPACE    1   " "
       CONSTANT_CHAR    4   "'\r'"
            OS_COLON    1   ":"
         WHITE_SPACE   17   "\n                "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    5   "\"\\r\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   17   "\n                "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
          KW_DEFAULT    7   "default"
            OS_COLON    1   ":"
         WHITE_SPACE   17   "\n                "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL   34   "\"not printable character: 0x%2x\n\""
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "c"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   17   "\n                "
          IDENTIFIER    5   "abort"
       OS_OPEN_PAREN    1   "("
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   17   "\n                "
            KW_BREAK    5   "break"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE   13   "\n            "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    9   "\n        "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    5   "\n    "
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    6   "printf"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL    6   "\"\\"\n\""
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    2   "\n\n"
             COMMENT   27   "/* Create a token object */"
         WHITE_SPACE    1   "\n"
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    9   "new_token"
       OS_OPEN_PAREN    1   "("
             KW_ENUM    4   "enum"
         WHITE_SPACE    1   " "
          IDENTIFIER   10   "TOKEN_KIND"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "kind"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "end"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    4   "kind"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "kind"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    5   "begin"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
          IDENTIFIER    1   "t"
              OS_DOT    1   "."
          IDENTIFIER    3   "end"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "end"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
          IDENTIFIER    1   "t"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    2   "\n\n"
             COMMENT   35   "/* Begin Your Implmentation Here */"
         WHITE_SPACE    1   "\n"
           KW_STRUCT    6   "struct"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "token"
         WHITE_SPACE    1   " "
          IDENTIFIER    9   "get_token"
       OS_OPEN_PAREN    1   "("
             KW_CHAR    4   "char"
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "prog"
      OS_OPEN_SQUARE    1   "["
     OS_CLOSE_SQUARE    1   "]"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
      OS_CLOSE_PAREN    1   ")"
         WHITE_SPACE    1   " "
       OS_OPEN_BRACE    1   "{"
         WHITE_SPACE    5   "\n    "
              KW_INT    3   "int"
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "cur"
         WHITE_SPACE    1   " "
               OS_EQ    1   "="
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    6   "\n\n    "
          IDENTIFIER    5   "error"
       OS_OPEN_PAREN    1   "("
      STRING_LITERAL   17   "\"not implemented\""
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    4   "prog"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    3   "cur"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    5   "\n    "
           KW_RETURN    6   "return"
         WHITE_SPACE    1   " "
          IDENTIFIER    9   "new_token"
       OS_OPEN_PAREN    1   "("
          IDENTIFIER    3   "EOF"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
            OS_COMMA    1   ","
         WHITE_SPACE    1   " "
          IDENTIFIER    5   "begin"
      OS_CLOSE_PAREN    1   ")"
        OS_SEMICOLON    1   ";"
         WHITE_SPACE    1   "\n"
      OS_CLOSE_BRACE    1   "}"
         WHITE_SPACE    1   "\n"
                 EOF
